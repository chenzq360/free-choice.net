
1. General:

	platform and libraries standard:
		Jre			7
		Java EE 	5
		MyEclipse 	2013 //optional
		Hibernate 	4.1
		Spring 		3.1
		Struts		2
	
	all identifier (tables to class, column to field)
		 in SQL and Java code have exactly the same name, no exception!
		 

2. SQL code convention:

	table with 'R_' perfix connects two/multi entities

	table with 'FC_' (stands for 'free-choice') 
		indicate that this is an entity table

		all name 				-> varchar(30)
		password, email, tag 	-> varchar(40)
		other					-> text

		date 				 	-> java.sql.Date
		timestamp 			 	-> java.sql.TimeStamp

		gender:boolean. true for female, false for male.

	primary key of entities are of integer type(32-bit).
	primary key starts with '_', e.g. '_id'
	foreign key ends with '_', e.g. 'id_user_'

3. Java code convention:

	Class names and Field names follow the usual convention(e.g. XxxYxxZzz),
	except for models(to consist with SQL)

	When using Hibernate, conventions of the class to a table are:
		all 'is_valid' has a default value: true(e.g. 'boolean is_valid = true;')
		and the annotation for the primary key is
		
			@Id
			@GeneratedValue(strategy = GenerationType.IDENTITY)
			private int _id;						//  ^ note here
	
	
	all entities have 9 default methods inheritated from 'IDao', they are

			int 			getCount();
			FC_Xyz			getById(int id);
			void			add(T xyz);
			void 			delete(T xyz);
			void 			delete(int xyzId);
			void			invalidate(T xyz);
			void			invalidate(int xyzId);
			void			update(T xyz);
			List<FC_Xyz> 	getAllT();
	
	DAO name conventions:
			DAO interface is named as IDao_Xyz, e.g. 'IDao_User'
									  ^ interface
				and thet are put into package net.freechoice.dao
				
			DAO implementation is named as DAO_Xxx, 'DAO_User'
				and thet are put into package net.freechoice.dao.impl
				
	DAO 'get' convention:
		
		get Xxx with parameter z such that z is one field of Xxx, use 'By'
				getXxxByZzz(zzz)
			e.g.	
				List<FC_Post>	getPostsByMonth(int month);
		
		get Xxx with parameter z such that z is not any field of Xxx(likely a entity 
		 related to Xxx), use 'Of'
			e.g.
				List<FC_Post>	getPostsOfTag(int tagId);
		
		get Xxx with parameter z such that z is of time type, use 'on'
			e.g.
				List<FC_Transaction> getTransactionsOnDate(Date date);
	
		If the given parameter is not the unique field of this Object(i.e. not the id)
		returns a List, even if there will always be one element only, in this list
	
		when return type is a list, user suffix 's'
				getXxxsByYyy or getXxxsOfYyy
			e.g.				      ^
				List<FC_Post>	getPostsOfTag(int tagId);
									   ^
			Otherwise do not add 's' or 'es'.				
						
4. Other conventions:

	
	
	
	
	